使用默认的优化级别（-O0），没有使用volatile 不影响编译速度的前提下，优化算法降低代码大小和可执行代码的运行速度
40000090 <delay>: 
40000090:	e52db004 	push	{fp}                  ; (str fp, [sp, #-4]!)，fp=R11
40000094:	e28db000 	add	    fp, sp, #0
40000098:	e24dd014 	sub	    sp, sp, #20
4000009c:	e50b0010 	str	    r0, [fp, #-16]
400000a0:	e3a03000 	mov	    r3, #0
400000a4:	e50b3008 	str	    r3, [fp, #-8]
400000a8:	ea000002 	b	                          ; 400000b8 <delay+0x28>
400000ac:	e51b3008 	ldr	    r3, [fp, #-8]
400000b0:	e2833001 	add	    r3, r3, #1
400000b4:	e50b3008 	str	    r3, [fp, #-8]
400000b8:	e51b2008 	ldr	    r2, [fp, #-8]
400000bc:	e51b3010 	ldr	    r3, [fp, #-16]
400000c0:	e1520003 	cmp	    r2, r3
400000c4:	bafffff8 	blt	                            400000ac <delay+0x1c>
400000c8:	e1a00000 	nop			                  ; (mov r0, r0)
400000cc:	e24bd000 	sub	    sp, fp, #0
400000d0:	e49db004 	pop	    {fp}		          ; (ldr fp, [sp], #4)
400000d4:	e12fff1e    bx	    lr

// 以上是指令操作
1. fp(R11)寄存器压栈，将fp寄存器中的内容存入sp = sp - 4的新地址中，其中sp将改变
2. fp = sp + 0,将sp的值赋予fp
3. sp = sp - 20
4. r0的值存入fp - 16的新地址中
5. 0存入r3中
6. r3存入fp - 8的新地址中
7. 无条件跳转到400000b8 <delay+0x28>:11
    8. 将fp - 8 处的数据存入r3
    9. r3 = r3 +1
    10. r3的值存入fp - 8的新地址中
11. 将fp - 8 处的数据存入r2
12. 将fp - 16 处的数据存入r3
13. 比较r2和r3
14. 如果小于，跳转到400000ac <delay+0x1c>：8

15. 指令对齐 
16. sp = fp - 0
17. fp出栈，将sp的数据存入fp，且sp = sp + 4
18. 跳转到lr，进行下一个指令



使用-O2优化级别，没有使用volatile
40000040 <delay>:
40000040:	e12fff1e 	bx	lr  

// 以上是指令操作
1. 跳转到lr，进行下一个指令




使用-O2优化级别，使用volatile 牺牲部分编译速度，提高目标代码的运行速度
400000a0 <delay>:
400000a0:	e24dd008 	sub	sp, sp, #8
400000a4:	e3a03000 	mov	r3, #0
400000a8:	e58d3004 	str	r3, [sp, #4]
400000ac:	e59d3004 	ldr	r3, [sp, #4]
400000b0:	e1500003 	cmp	r0, r3
400000b4:	da000005 	ble	400000d0 <delay+0x30>
400000b8:	e59d3004 	ldr	r3, [sp, #4]
400000bc:	e2833001 	add	r3, r3, #1
400000c0:	e58d3004 	str	r3, [sp, #4]
400000c4:	e59d3004 	ldr	r3, [sp, #4]
400000c8:	e1530000 	cmp	r3, r0
400000cc:	bafffff9 	blt	400000b8 <delay+0x18>
400000d0:	e28dd008 	add	sp, sp, #8
400000d4:	e12fff1e 	bx	lr

// 以上是指令操作
1. sp = sp - 8
2. 0存入r3中
3. r3存入sp + 4中
4. sp + 4 的值存入 r3
5. 比较r3和r0
6. 如果相等，跳转到400000d0 <delay+0x30>：13
    7. sp + 4 的值存入 r3
    8. r3 = r3 + 1
    9. r3的值存入sp + 4中
    10. sp + 4 的值存入 r3
    11. 比较r3和r0
    12. 如果小于，跳转到400000b8 <delay+0x18>：7
13. sp = sp + 8
14. 跳转到lr，进行下一个指令